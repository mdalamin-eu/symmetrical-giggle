{"version":3,"sources":["common/spinner.gif","layouts/Navbar.js","actions/createAlert.js","actions/types.js","actions/actions.js","components/breedItem.js","components/breedFeed.js","common/loading.js","layouts/Breeds.js","common/SearchInput.js","layouts/SearchArea.js","components/breedDetails.js","common/toUpercase.js","components/searchLists.js","common/createAlert.js","App.js","serviceWorker.js","reducers/Breeds.js","reducers/createAlert.js","reducers/index.js","store.js","index.js"],"names":["module","exports","Navbar","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","createAlert","msg","alertType","timeout","dispatch","uuid","v4","payload","setTimeout","getbreeds","breed","a","config","headers","url","axios","get","res","console","log","data","BreedItem","this","props","name","origin","temperament","_id","Component","BreedFeed","breeds","map","key","spinner","src","img","style","width","margin","display","alt","Breeds","breedsContent","items","loading","length","connect","state","breedsCat","BreedsSearchInput","searchInput","React","createRef","event","handleSearch","history","current","value","push","placeholder","onKeyPress","handleKeyPress","ref","onClick","withRouter","SearchArea","SearchInput","breedDetails","getbreedById","match","params","breedContent","description","toUpperCase","titleize","SearchLists","searchedBreed","searchBreedsByName","setState","prevProps","title","alerts","alert","App","exact","path","component","BreedDetails","BreedsSearchLists","Boolean","window","location","hostname","initialState","combineReducers","action","filter","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.398da3b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ac447129.gif\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <div className=\"container\">\n\n    <Link className=\"navbar-brand\" to=\"/breeds\">Breeds <span className=\"sr-only\">(current)</span></Link>\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n  \n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav ml-auto\">\n        <li className=\"nav-item active\">\n          <Link className=\"nav-link\" to=\"/symmetrical-giggle\">Home <span className=\"sr-only\">(current)</span></Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/breeds\">Breeds</Link>\n        </li>\n      </ul>\n      \n    </div>\n    </div>\n  </nav>\n  );\n}\n\nexport default Navbar;"," \nimport uuid from \"uuid\"; \nimport { SET_ALERT, REMOVE_ALERT } from \"./types\";\n\nexport const createAlert = (msg, alertType, timeout = 5000) => dispatch => {\n  const id = uuid.v4();\n  dispatch({\n    type: SET_ALERT,\n    payload: { msg, alertType, id }\n  });\n\n  setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), timeout);\n};","export const FETCH_BREEDS_INIT = 'FETCH_BREEDS_INIT'\nexport const FETCH_BREEDS_SUCCESS = 'FETCH_BREEDS_SUCCESS'\nexport const FETCH_FAIL = 'FETCH_FAIL'\nexport const  FETCH_BREED_BY_ID = 'FETCH_BREED_BY_ID'\nexport const SET_ALERT = 'SET_ALERT' \nexport const REMOVE_ALERT = 'REMOVE_ALERT'","import axios from 'axios'\n\nimport {\n    FETCH_BREEDS_INIT,\n    FETCH_BREEDS_SUCCESS,\n    FETCH_FAIL,\n    FETCH_BREED_BY_ID\n  } from './types';\n  import {createAlert} from './createAlert'\n\n\n  \n  const fetchBreedsInit = () => {\n    return {\n      type: FETCH_BREEDS_INIT\n    }\n  }\n\n  export const getbreeds = (breed) => async dispatch => {\n\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n  \n      dispatch(fetchBreedsInit())\n      const url = breed ? `https://breedscat.herokuapp.com/api/v1/breeds?name=${breed}` : 'https://­breedscat.herokuapp.c­om/api/v1/breeds';\n      const res = await axios.get(url, config);\n      console.log(res)\n      dispatch({\n        type: FETCH_BREEDS_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: FETCH_FAIL,\n        payload: err\n      });\n    }\n  }\n  \n  export const getbreedById = id => async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n  \n      dispatch(fetchBreedsInit());\n      const res = await axios.get(`https://­breedscat.herokuapp.c­om/api/v1/breeds/${id}`, config);\n      dispatch({\n        type: FETCH_BREED_BY_ID,\n        payload: res.data\n      });\n    } catch (error) {\n        dispatch(createAlert('Something went wrong', \"danger\"))\n  \n      dispatch({\n        type: FETCH_FAIL,\n        payload: error\n      });\n    }\n  };","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\n class BreedItem extends Component {\n\n  render() {\n      const {breed} = this.props\n     \n    return (\n      <div className=\"col-md-3\" >\n        <div className=\"card\">\n            <div className=\"card-body\">\n    <h3 className=\"card-title\">{breed.name}</h3>\n    <h5 className=\"card-title\">Origin:{breed.origin}</h5>\n    <h5 className=\"card-title\">Temperament:{breed.temperament}</h5>\n               \n                <Link to={`/breed-details/${breed._id}`} className=\"btn btn-info mr-1\">\n                  Details\n                </Link>\n\n            </div>\n    </div>\n</div>\n    )\n  }\n}\n\nexport default  BreedItem","import React from \"react\";\nimport BreedItem from \"./breedItem\";\n\nconst BreedFeed = ({ breeds }) => {\n  return breeds.map(breed => <BreedItem key={breed._id} breed={breed} />);\n};\n\nexport default BreedFeed;","import React from \"react\";\nimport img from \"./spinner.gif\";\n\nexport default function spinner() {\n  return (\n    <div>\n      {\" \"}\n      <img\n        src={img}\n        style={{\n          width: \"200px\",\n          margin: \"auto\",\n          display: \"block\"\n        }}\n        alt=\"\"\n      />\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getbreeds } from '../actions/actions';\nimport BreedFeed from '../components/breedFeed'\nimport Loading from '../common/loading'\n\nclass Breeds extends Component { \n\n    componentDidMount() {\n        this.props.dispatch(getbreeds())\n    }\n\n    render() {\n        const {breeds, loading} = this.props.items;\n        console.log('loading', loading)\n        let breedsContent;\n\n        if (breeds === null && loading) {\n            breedsContent = <Loading/>;\n        } else {\n          if (breeds && breeds.length > 0) {\n            breedsContent = <BreedFeed breeds={breeds} />;\n          } else {\n            breedsContent = <p>Breeds not found</p>;\n          }\n        }\n      \n        return (\n            <section className=\"hero-section pt-5 pb-5\">\n                <div className=\"container\">\n                <h3 className=\"text-center mb-5 \">Browse All Breeds</h3>\n                    <div className=\"row justify-content-center mt-3\">\n                    \n                 {breedsContent}\n        \n                    </div>\n                </div>\n            </section>\n          );\n\n    }\n  \n};\n\nconst mapStateToProps = state => ({\n    items: state.breedsCat\n  });\n\n\nexport default connect(mapStateToProps)(Breeds);","import React,{Component} from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass BreedsSearchInput extends Component {\n\n  constructor() {\n    super();\n\n    this.searchInput = React.createRef();\n  }\n\n  handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.handleSearch();\n    }\n  }\n\n  handleSearch() {\n    const { history } = this.props;\n    const breed = this.searchInput.current.value;\n\n    breed ? history.push(`/breed/${breed}`) : history.push('/');\n  }\n\n\n  render() {\n    return (\n        <div className=\"input-group mt-5\">\n        <input type=\"search\"  className=\"form-control\" placeholder=\"Search by Name\"  aria-label='Search' onKeyPress={(event) => { this.handleKeyPress(event)}}\n               ref={this.searchInput}/>\n        <div className=\"input-group-append\" >\n            <button onClick={() => {this.handleSearch()}} className=\"btn btn-outline-secondary\" type='submit'>Search</button>\n        </div>\n    </div>\n    )\n  }\n}\n\n\nexport default withRouter(BreedsSearchInput)","import React from 'react';\nimport SearchInput from '../common/SearchInput'\nconst SearchArea = () => {\n  return (\n    <section className=\"hero-section pt-5 pb-5\">\n        <div className=\"container\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-md-6\">\n                    <div className=\"search\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h3 className=\"card-title mb-3\">Find Your Perfect Cat Breed</h3>\n                                <form >\n                                    <SearchInput/>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n  );\n}\n\nexport default SearchArea;","import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport { getbreedById } from '../actions/actions';\nimport Loading from '../common/loading'\nclass breedDetails extends Component {\n    componentDidMount() {\n        this.props.getbreedById(this.props.match.params.id);\n      }\n\n    render(){\n        const { breed, loading } = this.props.breed;\n         console.log(breed)\n        let breedContent;\n\n        if (breed === null ||  loading) {\n            breedContent = <Loading/>\n        } else {\n          \n            breedContent = (<div className=\"col-md-6\">\n            <div className=\"card\">\n                <div className=\"card-body\">\n        <h2 className=\"card-title\">Name:{breed.name}</h2>\n        <p className=\"muted\">Description:{breed.description}</p>\n        <h5 className=\"card-title\">Temperament:{breed.temperament}</h5>\n        <h5 className=\"card-title\">Origin:{breed.origin}</h5>\n                </div>\n        </div>\n    </div>)\n        }\n        return (\n            <section className=\"hero-section pt-5 pb-5\">\n                <div className=\"container\">\n                    <div className=\"row justify-content-center\">\n                        {breedContent}\n                    </div>\n                \n                </div>\n            </section>\n          );\n\n    }\n  \n}\n\nconst mapStateToProps = state => ({\n    breed: state.breedsCat\n  });\n\n\nexport default connect(mapStateToProps,{getbreedById})(breedDetails);","import titleize from 'titleize';\n\nexport const toUpperCase = value => value ? titleize(value) : ''","import React, { Component } from 'react'\nimport { getbreeds } from '../actions/actions';\nimport { connect } from 'react-redux';\nimport BreedFeed from '../components/breedFeed'\nimport Loading from '../common/loading'\nimport { toUpperCase } from '../common/toUpercase';\nclass SearchLists extends Component {\n\n    state = {\n        searchedBreed: ''\n    }\n\n    componentDidMount () {\n        this.searchBreedsByName()\n    }\n\n  componentDidUpdate(prevProps) {\n    const currentUrlParam = this.props.match.params.breed;\n    const prevUrlParam = prevProps.match.params.breed;\n\n    if (currentUrlParam !== prevUrlParam) {\n      this.searchBreedsByName();\n    }\n  }\n\n    searchBreedsByName =() => {\n        const searchedBreed = this.props.match.params.breed;\n        this.setState({searchedBreed});\n    \n        this.props.dispatch(getbreeds(searchedBreed));\n      }\n\n\n  render() {\n    const {breeds, loading} = this.props.items;\n    const { searchedBreed } = this.state;\n\n    let breedsContent;\n    let title = '';\n\n        if (breeds === null && loading) {\n            breedsContent = <Loading/>;\n        } else {\n          if (breeds && breeds.length > 0) {\n            title = `${toUpperCase(searchedBreed)}`;\n            breedsContent = <BreedFeed breeds={breeds} />;\n          } else {\n            breedsContent = <h1>Your searched {toUpperCase(searchedBreed)} not found</h1>;\n          }\n        }\n    return (\n        <section className=\"hero-section pt-5 pb-5\">\n        <div className=\"container\">\n    <h3 className=\"text-center mb-5 \">Browse {title} Breeds</h3>\n            <div className=\"row justify-content-center mt-3\">\n                {breedsContent}\n            </div>\n        </div>\n    </section>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n    items: state.breedsCat\n  });\n\nexport default connect(mapStateToProps)(SearchLists)","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst Alert = ({ alerts }) =>\n  alerts !== 0 &&\n  alerts.length > 0 &&\n  alerts.map(alert => (\n    <div key={alert.id} className={`alert alert-${alert.alertType}`}>\n      {alert.msg}\n    </div>\n  ));\n\nconst mapStateToProps = state => ({\n  alerts: state.alert\n});\n\nexport default connect(mapStateToProps)(Alert);"," \nimport React, { Fragment, Component } from 'react';\nimport { BrowserRouter as Router , Route , Switch } from 'react-router-dom';\nimport './App.css';\nimport Navbar from './layouts/Navbar'\nimport Breeds from './layouts/Breeds'\nimport  SearchArea from './layouts/SearchArea'\nimport BreedDetails from './components/breedDetails'\nimport BreedsSearchLists from './components/searchLists'\nimport Alert from './common/createAlert'\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n      <Router>\n        <Fragment>\n         \n          <Navbar />\n          <Alert/>\n           \n            <Route exact path=\"/symmetrical-giggle\" component={ SearchArea } />\n           <Route exact path=\"/symmetrical-giggle\" component={ Breeds } />\n          <Switch>\n              \n              <Route exact path=\"/breeds\" component={ Breeds } />\n              <Route exact path=\"/breed-details/:id\" component={BreedDetails} />\n              <Route exact path=\"/breed/:breed\" component={BreedsSearchLists} />\n              \n            </Switch>\n       \n           \n          </Fragment>\n          </Router>\n    </div>\n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport {\n    FETCH_BREEDS_INIT,\n    FETCH_BREEDS_SUCCESS,\n    FETCH_FAIL,\n    FETCH_BREED_BY_ID\n  } from '../actions/types';\nconst initialState = {\n  breed: {},\n  breeds: [],\n  loading: false\n};\n\nexport default function(state = initialState, action) {\n    const { payload, type } = action;\n\n    switch(type) {\n        case FETCH_BREEDS_INIT:\n        return {\n          ...state,\n          breed: null,\n          breeds: null,\n          loading: true\n        };\n      case FETCH_BREEDS_SUCCESS:\n        return {\n          ...state,\n          breeds: payload,\n          loading: false\n        };\n        case FETCH_BREED_BY_ID:\n            return {\n              ...state,\n              breed: payload,\n              loading: false\n            };\n      case FETCH_FAIL:\n        return {\n          ...state,\n          breed: null,\n          breeds: null,\n          loading: false\n        };\n\n      default:\n        return state;\n    }\n  }"," \nimport { SET_ALERT, REMOVE_ALERT } from \"../actions/types\";\n\nconst initialState = [];\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_ALERT:\n      return [...state, payload];\n\n    case REMOVE_ALERT:\n      return state.filter(alert => alert.id !== payload);\n\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport breedsCat from './Breeds';\nimport alert from './createAlert'\n\nexport default combineReducers({\n  breedsCat,\n  alert,\n});","import { createStore,applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/';\n\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}